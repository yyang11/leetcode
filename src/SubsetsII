package undone;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

//the subsets of [2, 2, 2] is [[], [2], [2, 2], [2, 2,2]]
public class SubsetsII {
  public List<List<Integer>> subsetsWithDup(int[] num) {
    Arrays.sort(num);
    List<List<Integer>> result = new LinkedList<List<Integer>>();
    LinkedList<Integer> subset = new LinkedList<Integer>();
    collectSubsets(num, 0, subset, result);
    return result;
  }

  void collectSubsets(int[] s, int pos, LinkedList<Integer> subset, List<List<Integer>> result) {
    if(pos == s.length) {
      result.add(new ArrayList<Integer>(subset));
      return;
    }
    int numDup = 0;
    while(pos+numDup<s.length && s[pos+numDup]==s[pos])
      numDup++;
    collectSubsets(s, pos + numDup, subset, result);
    for(int i=0; i<numDup; i++) {
      subset.add(s[pos]);
      collectSubsets(s, pos + numDup, subset, result);
    }
    for(int i=0; i<numDup; i++)
      subset.removeLast();
  }

  public static void main(String args[]) {
    int[] num = new int[]{1, 2, 2};
    Object result = new SubsetsII().subsetsWithDup(num);
    System.out.println(result);
  }
}
  /*non-recursive solution
  vector<vector<int> > subsetsWithDup(vector<int> &S) {
    sort(S.begin(), S.end());
    vector<vector<int>> result(1);
    int oldval=S[0];
    int oldj=0;
    for(int i=0; i<S.size(); i++){
      int temp=oldj;
      if(S[i]!=oldval){
        oldval=S[i]; temp=0;
      }
      int j=result.size();
      oldj=j;
      while(j-->temp){
        //note temp here help avoid creating duplicate subsets
        result.push_back(result[j]);
        result.back().push_back(S[i]);
      }
    }
    return result;
  }
  */
